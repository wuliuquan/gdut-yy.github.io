(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{610:function(t,e,o){"use strict";o.r(e);var r=o(0),a=Object(r.a)({},function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"effecitive-java-third-edition"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#effecitive-java-third-edition","aria-hidden":"true"}},[t._v("#")]),t._v(" Effecitive Java (Third Edition)")]),t._v(" "),o("h2",{attrs:{id:"书评"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#书评","aria-hidden":"true"}},[t._v("#")]),t._v(" 书评")]),t._v(" "),o("p",[t._v("本书被誉为 Java四大名著 之一。鉴于第三版还没有出中文版，本着 “读新不读旧” 的原则，直接读起了 英文原版。")]),t._v(" "),o("p",[t._v("第三版 新增了 Java 7 ~ 9 的新特性。条目从 78条 增添到 90条。")]),t._v(" "),o("p",[t._v("本书主要内容是作者推荐的 Java 编程时候应该遵循的原则。采用 “观点 + 理由” 的结构。")]),t._v(" "),o("p",[t._v("此书是本人真正意义上的第一本 英文编程类书籍。")]),t._v(" "),o("p",[t._v("值得纪念。")]),t._v(" "),o("h2",{attrs:{id:"_1-简介"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 简介")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 1 : Introduction")])]),t._v(" "),o("h2",{attrs:{id:"_2-创建和销毁对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建和销毁对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 2 创建和销毁对象")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 2 : Creating and Destroying Objects")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item1.html"}},[t._v("Item 1 : Consider static factory methods instead of constructors【考虑用静态工厂方法代替构造器】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item2.html"}},[t._v("Item 2 : Consider a builder when faced with many constructor parameters【遇到多个构造器时考虑 builder】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item3.html"}},[t._v("Item 3 : Enforce the singleton property with a private constructor or an enum type【使用私有构造器或枚举类型实现单例模式】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item4.html"}},[t._v("Item 4 : Enforce noninstantiability with a private constructor【使用私有构造器实现不可实例化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item5.html"}},[t._v("Item 5 : Prefer dependency injection to hardwiring resources【DI（依赖注入）优于】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item6.html"}},[t._v("Item 6 : Avoid creating unnecessary objects【避免创建不必要的对象】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item7.html"}},[t._v("Item 7 : Eliminate obsolete object references【消除过时的对象引用】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item8.html"}},[t._v("Item 8 : Avoid finalizers and cleaners【避免使用 finalizers 和 cleaners】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap2/item9.html"}},[t._v("Item 9 : Prefer try-with-resources to try-finally【try-with-resources 优先于 try-finally】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_3-对于所有对象都通用的方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-对于所有对象都通用的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3 对于所有对象都通用的方法")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 3 : Methods Common to All Objects")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap3/item10.html"}},[t._v("Item 10 : Obey the general contract when overriding equals【重写 equals() 方法请遵守通用约定】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap3/item11.html"}},[t._v("Item 11 : Always override hashCode when you override equals【重写 equals() 时重写 hashCode()】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap3/item12.html"}},[t._v("Item 12 : Always override toString【总是重写 toString()】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap3/item13.html"}},[t._v("Item 13 : Override clone judiciously【谨慎重写 clone()】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap3/item14.html"}},[t._v("Item 14 : Consider implementing Comparable【考虑实现 Comparable 接口】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_4-类和接口"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-类和接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 4 类和接口")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 4 : Classes and Interfaces")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item15.html"}},[t._v("Item 15 : Minimize the accessibility of classes and members【使类和成员的可访问性最小化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item16.html"}},[t._v("Item 16 : In public classes, use accessor methods, not public fields【在公有类中使用访问方法而非公有域】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item17.html"}},[t._v("Item 17 : Minimize mutability【使可变性最小化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item18.html"}},[t._v("Item 18 : Favor composition over inheritance【复合优先于继承】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item19.html"}},[t._v("Item 19 : Design and document for inheritance or else prohibit it【要么为继承而设计，并提供文档，要么就禁止继承】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item20.html"}},[t._v("Item 20 : Prefer interfaces to abstract classes【接口优于抽象类】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item21.html"}},[t._v("Item 21 : Design interfaces for posterity【为子类设计接口】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item22.html"}},[t._v("Item 22 : Use interfaces only to define types【接口只用于定于类型】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item23.html"}},[t._v("Item 23 : Prefer class hierarchies to tagged classes【类层次优于标签类】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item24.html"}},[t._v("Item 24 : Favor static member classes over nonstatic【优先考虑静态成员类】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap4/item25.html"}},[t._v("Item 25 : Limit source files to a single top-level class【将源文件限制为一个顶级类】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_5-泛型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_5-泛型","aria-hidden":"true"}},[t._v("#")]),t._v(" 5 泛型")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 5 : Generics")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item26.html"}},[t._v("Item 26 : Don't use raw types【不要使用原生类型】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item27.html"}},[t._v("Item 27 : Eliminate unchecked warnings【消除非受检警告】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item28.html"}},[t._v("Item 28 : Perfer lists to arrays【列表优先于数组】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item29.html"}},[t._v("Item 29 : Favor generic types【优先考虑泛型】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item30.html"}},[t._v("Item 30 : Favor generic methods【优先考虑泛型方法】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item31.html"}},[t._v("Item 31 : Use bounded withcards to increase API flexibility【利用有限制通配符来提升 API 的灵活性】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item32.html"}},[t._v("Item 32 : Combine generics and varargs judiciously【合并泛型和可变长参】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap5/item33.html"}},[t._v("Item 33 : Consider typesafe heterogeneous containers【优先考虑类型安全的异构类型】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_6-枚举和注解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_6-枚举和注解","aria-hidden":"true"}},[t._v("#")]),t._v(" 6 枚举和注解")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 6 : Enums and Annotations")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item34.html"}},[t._v("Item 34 : Use enums instead of int constants【用 enum 代替 int 常量】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item35.html"}},[t._v("Item 35 : Use instance fileds insteads of ordinals【用实例域代替序数】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item36.html"}},[t._v("Item 36 : Use EnumSet instead of bit fileds【用 EnumSet 代替位域】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item37.html"}},[t._v("Item 37 : Use EnumMap instead of ordinal indexing【用 EnumMap 代替 序数索引】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item38.html"}},[t._v("Item 38 : Emulate extensible enums with interfaces【用接口模拟可伸缩的枚举】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item39.html"}},[t._v("Item 39 : Perfer annotations to naming patterns【注解优先于命名模式】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item40.html"}},[t._v("Item 40 : Consistently use the Override annotation【坚持使用 Override 注解】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap6/item41.html"}},[t._v("Item 41 : Use market interfaces to define types【用标记接口定义类型】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_7-lambdas表达式和流"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-lambdas表达式和流","aria-hidden":"true"}},[t._v("#")]),t._v(" 7 Lambdas表达式和流")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 7: Lambdas and Streams")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap7/item42.html"}},[t._v("Item 42 : Perfer lambdas to anonymous classes【Lambdas表达式 优先于 匿名类】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap7/item43.html"}},[t._v("Item 43 : Perfer methods references to lambdas【方法引用 优先于 Lambdas表达式】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap7/item44.html"}},[t._v("Item 44 : Favor the use of standard functional interfaces【优先使用标准的函数接口】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap7/item45.html"}},[t._v("Item 45 : User streams judiciously【谨慎地使用流】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap7/item46.html"}},[t._v("Item 46 : Perfer side-effect-free functions in streams【在流中优先使用无副作用的函数】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap7/item47.html"}},[t._v("Item 47 : Perfer Collection to Stream as a return type【优先使用 Collection 而不是 Stream 作为返回类型】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap7/item48.html"}},[t._v("Item 48 : Use caution when making streams parallel【谨慎地使用并行流】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_8-方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 8 方法")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 8 : Methods")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item49.html"}},[t._v("Item 49 : Check parameters for validity【检查参数的有效性】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item50.html"}},[t._v("Item 50 : Make defensive copies when needed【必要时进行保护性拷贝】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item51.html"}},[t._v("Item 51 : Design method signatures carefully【谨慎设计方法签名】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item52.html"}},[t._v("Item 52 : Use overloading judiciously【慎用重载】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item53.html"}},[t._v("Item 53 : Use varargs judiciously【慎用可变参数】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item54.html"}},[t._v("Item 54 : Return empty collections or arrays, not null【返回零长度的数组或集合，而不是 null】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item55.html"}},[t._v("Item 55 : Return optionals judiciously【谨慎地返回 optionals】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap8/item56.html"}},[t._v("Item 56 : Write doc comments for all exposed API elements【为所有导出的 API 元素写文档注释】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_9-通用程序设计"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_9-通用程序设计","aria-hidden":"true"}},[t._v("#")]),t._v(" 9 通用程序设计")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 9 : General Programming")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item57.html"}},[t._v("Item 57 : Minimize the scope of local variables【将局部变量的作用域最小化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item58.html"}},[t._v("Item 58 : Prefer for-each loops to traditional for loops【for-each循环优先于传统for循环】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item59.html"}},[t._v("Item 59 : Know and use the libraries【了解和使用类库】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item60.html"}},[t._v("Item 60 : Avoid float and double if exact answers are required【如果需要精确的答案，避免使用float和double】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item61.html"}},[t._v("Item 61 : Prefer primitive types to boxed primitives【基本类型优先于装箱基本类型】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item62.html"}},[t._v("Item 62 : Avoid strings where other types are more appropriate【如果其他类型更适合，则尽量避免使用String】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item63.html"}},[t._v("Item 63 : Beware the performance of string concatenation【当心字符串连接的性能】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item64.html"}},[t._v("Item 64 : Refer to objects by their interfaces【通过接口引用对象】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item65.html"}},[t._v("Item 65 : Prefer interface to reflection【接口优先于反射机制】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item66.html"}},[t._v("Item 66 : Use native methods judiciously【谨慎地使用本地方法】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item67.html"}},[t._v("Item 67 : Optimize judiciously【谨慎地进行优化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap9/item68.html"}},[t._v("Item 68 : Adhere to generally accepted naming conventions【遵守普遍接受的命名惯例】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_10-异常"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_10-异常","aria-hidden":"true"}},[t._v("#")]),t._v(" 10 异常")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 10 : Exceptions")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item69.html"}},[t._v("Item 69 : Use exceptions only for exceptional conditions【只针对异常的情况才使用异常】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item70.html"}},[t._v("Item 70 : Use checked exceptions for recoverable conditions and runtime exceptions for programming errors【在可重现环境中使用受检异常，在程序错误中使用运行时异常】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item71.html"}},[t._v("Item 71 : Avoid unnecessary use of checked exceptions【避免不必要地使用受检的异常】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item72.html"}},[t._v("Item 72 : Favor the use of standard exceptions【优先使用标准的异常】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item73.html"}},[t._v("Item 73 : Throw exceptions appropriate to the abstraction【抛出与抽象相对应的异常】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item74.html"}},[t._v("Item 74 : Document all exceptions thrown by each method【每个方法抛出的异常都要有文档】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item75.html"}},[t._v("Item 75 : Include failure-capture information in detail messages【在细节消息中包含能捕获失败的信息】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item76.html"}},[t._v("Item 76 : Strive for failure atomicity【努力使失败保持原子性】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap10/item77.html"}},[t._v("Item 77 : Don't ignore exceptions【不要忽略异常】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_11-并发"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_11-并发","aria-hidden":"true"}},[t._v("#")]),t._v(" 11 并发")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 11 : Concurrency")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap11/item78.html"}},[t._v("Item 78 : Synchronize access to share mutable data【同步访问共享的可变数据】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap11/item79.html"}},[t._v("Item 79 : Avoid excessive synchronization【避免过度同步】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap11/item80.html"}},[t._v("Item 80 : Prefer executors, tasks, and streams to threads【executors, tasks 优先于线程】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap11/item81.html"}},[t._v("Item 81 : Prefer concurrency utilities to wait and notify【并发工具优先于 wait 和 notify】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap11/item82.html"}},[t._v("Item 82 : Document thread safety【线程安全化的文档化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap11/item83.html"}},[t._v("Item 83 : Use lazy initialization【慎用延迟初始化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap11/item84.html"}},[t._v("Item 84 : Don't depend on the threadscheduler【不要依赖线程调度器】")])],1)]),t._v(" "),o("h2",{attrs:{id:"_12-序列化"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_12-序列化","aria-hidden":"true"}},[t._v("#")]),t._v(" 12 序列化")]),t._v(" "),o("blockquote",[o("p",[t._v("CHAPTER 12 : Serialization")])]),t._v(" "),o("ul",[o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap12/item85.html"}},[t._v("Item 85 : Perfer alternatives to Java serialization【选择要优先于 Java 序列化】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap12/item86.html"}},[t._v("Item 86 : Implement Serializable with great caution【谨慎地实现 Serializable 接口】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap12/item87.html"}},[t._v("Item 87 : Consider using a custom serialized form【考虑使用自定义的序列化形式】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap12/item88.html"}},[t._v("Item 88 : Write readObject methods defensively【保护性地编写 readObject 方法】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap12/item89.html"}},[t._v("Item 89 : For instance control, prefer enum types to readResolve【对于实例控制，枚举类型优先于 readResolve】")])],1),t._v(" "),o("li",[o("router-link",{attrs:{to:"/module_book/tech/EJ3/chap12/item90.html"}},[t._v("Item 90 : Consider serialization proxies instead of serialized instances【考虑用序列化代理代替序列化实例】")])],1)]),t._v(" "),o("h2",{attrs:{id:"note"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#note","aria-hidden":"true"}},[t._v("#")]),t._v(" NOTE")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("单例模式是一个非常经典的模式\n\n特别是涉及到 线程安全 和 反射攻击 的时候\n\n作者认为单元素的枚举类型通常是实现单例的最佳方法，即：\n\npublic enum Elvis{\n    INSTANCE;\n\n    public void leaveTheBuilding(){ ... }\n}\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("原生态类型是指 Java 5 之前未有泛型的年代的类型。\n\n\tSet<Object> 是个参数化类型，表示可以包含任何对象类型的一个集合。\n\tSet<?> 是一个通配符类型，表示只能包含某种未知对象的一个集合\n\tSet 则是个原生态类型。\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("类型转换问题\n\n使用数组可能会在运行时出错，而使用 List 则会在编译时发现出错。\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("\tpublic void pushAll(Iterable<? extends E> src){\n        for(E e : src){\n            push(e);\n        }\n    }\n    \n    public void popAll(Collection<? super E> dst){\n        while (!isEmpty()){\n            dst.add(pop());\n        }\n    }\n\n> PECS stands for producer-extends, consumer-super.\n>\n> In other words, if a parameterized type represents a T producer, use <? extends T>;\nif it represents a T consumer, use <? super T>. In our Stack example, pushAll’s\nsrc parameter produces E instances for use by the Stack, so the appropriate type\nfor src is Iterable<? extends E>; popAll’s dst parameter consumes E instances\nfrom the Stack, so the appropriate type for dst is Collection<? super E>. The\nPECS mnemonic captures the fundamental principle that guides the use of wildcard\ntypes. Naftalin and Wadler call it the Get and Put Principle [Naftalin07, 2.4].\n\nPECS 表示 producer-extends, consumer-super.\n\n换句话说，如果参数化类型表示一个 T 生产者，就使用 <? extends T>；如果它表示一个 T 消费者，就使用 <? super T>。\n\n在我们的 Stack 示例中，pushAll 的 src 参数产生 E 实例供 Stack 使用，因此 src 相应的类型为 Iterable<? extends E>；\n\npopAll 的 dst 参数通过 Stack 消费 E 实例，因此 dst 相应的类型为 Collection<? super E>。\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("- 术语：atomic 原子。Java 语言规范中保证读或写一个（非 long 或 double）变量时是原子的。\n- 术语：liveness failure : the program fails to make progress. 活性失败：程序无法前进。\n- 术语：safety failure : the program computes the wrong results. 安全性失败：程序计算出错误的结果。\n\nvolatile 关键字。虽然 volatile 修饰符不执行互斥访问，但它可以保证任何一个线程在读取该域的时候都将看到最近刚刚被写入的值。\n\n如果读和写操作没有都被同步，同步就不会起作用。\n\n自增 AtomicLong 类型（java.util.concurrent.atomic）\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("- 不要从同步区域内调用外来方法\n- 尽量减少同步区域内的工作量\n- 在设计类时，有足够理由在内部同步类时，才在内部同步\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("- Executors.newCachedThreadPool \n- Executors.newFixedThreadPool\n- fork-join \n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("- System.nanoTime\n- System.currentTimeMillis\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("常见线程安全性级别：\n\n- Immutable 不可变的\n- Unconditionally thread-safe 无条件的线程安全\n- Conditionally thread-safe 有条件的线程安全\n- No thread-safe 非线程安全\n- Thread-hostile 线程对立\n")])])])])},[],!1,null,null,null);e.default=a.exports}}]);