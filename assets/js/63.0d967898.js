(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{458:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第十章：函数式异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十章：函数式异步","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十章：函数式异步")]),t._v(" "),a("p",[t._v("这本书读到这里，你现在拥有了所有 FP —— 我称之为 “轻量函数式编程” —— 基础的原始概念。在这一章中，我们会将这些概念应用于一种不同的环境，但不会出现特别的新想法。")]),t._v(" "),a("p",[t._v("至此，我们做的所有事情几乎都是同步的，也就是说我们使用立即的输入调用函数并立即得到输出值。许多工作可以用这种方式完成，但对于一个现代 JS 应用程序的整体来说根本不够用。为了真正地对 JS 的现实世界中的 FP 做好准备，我们需要理解异步 FP。")]),t._v(" "),a("p",[t._v("我们本章的目标是将我们对使用 FP 进行值的管理的思考，扩展至将这样的操作分散到一段时间上。我们将看到 Observable（以及 Promise！）是这样做的一种极好的方式。")]),t._v(" "),a("h2",{attrs:{id:"作为状态的时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为状态的时间","aria-hidden":"true"}},[t._v("#")]),t._v(" 作为状态的时间")]),t._v(" "),a("p",[t._v("在你的整个应用程序中最复杂的状态就是时间。也就是说，如果状态在你坚定的控制之下立即地从一种状态转换到另一种，那么状态管理就容易多了。当你的应用程序的状态为了响应分散在一段时间上的事件而隐含地变化时，它的管理难度就会呈几何级数增长。")]),t._v(" "),a("p",[t._v("通过使代码更可信与更可预测来使它更易于阅读 —— 我们在这本书中展示 FP 的方式的每一部分都与此有关。当你在程序中引入异步的时候，这些努力将受到很大冲击。")]),t._v(" "),a("p",[t._v("让我们说的更明白一点：一些操作不会同步地完成，就单纯这一点来说不是我们关心的；发起异步行为很容易。需要很多额外努力的是，如何协调这些动作的应答，这些应答中的每一个都会潜在地改变你应用程序的状态。")]),t._v(" "),a("p",[t._v("那么，是你作为作者为此努力好呢？还是将这个问题留给你代码的读者，让他们自己去搞清如果 A 在 B 之前完成（或反之）程序将是什么状态？这是一个夸张的问题，但从我的观点来说它有一个十分坚定地答案：为了使这样复杂的代码更具可读性，作者必须要付出比平常多得多的努力。")]),t._v(" "),a("h3",{attrs:{id:"递减时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递减时间","aria-hidden":"true"}},[t._v("#")]),t._v(" 递减时间")]),t._v(" "),a("p",[t._v("异步编程最重要的成果之一，是通过将时间从我们的关注范围中抽象出去来简化状态变化管理。为了展示这一点，我们首先来看一个存在竟合状态（也就是，时间复杂性）而必须手动管理的场景：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" customerId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupCustomer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" customerId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onCustomer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("customerRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" orders "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" customer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orders "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    customer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" customerRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orders "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupOrders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" customerId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onOrders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("customerOrders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        customer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orders "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" customerOrders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("回调 "),a("code",[t._v("onCustomer(..)")]),t._v(" 和 "),a("code",[t._v("onOrders(..)")]),t._v(" 处于一种二元竟合状态。假定它们同时运行，那么任何一个都有可能首先运行，而预测哪一个将会发生是不可能的。")]),t._v(" "),a("p",[t._v("如果我们可以将 "),a("code",[t._v("lookupOrders(..)")]),t._v(" 嵌入到 "),a("code",[t._v("onCustomer(..)")]),t._v(" 内部，我们就可以确保 "),a("code",[t._v("onOrders(..)")]),t._v(" 在 "),a("code",[t._v("onCustomer(..)")]),t._v(" 之后运行。但我们不能这么做，因为我们需要这两个查询并发地发生。")]),t._v(" "),a("p",[t._v("那么为了将这种基于时间的状态复杂性规范化，与一个外部词法闭包的变量 "),a("code",[t._v("customer")]),t._v(" 一起，我们在回调中分别使用了一对 "),a("code",[t._v("if")]),t._v(" 语句检测。当每个回调运行时，它检查 "),a("code",[t._v("customer")]),t._v(" 的状态，以此判断它自己的相对顺序；如果对一个回调来说 "),a("code",[t._v("customer")]),t._v(" 没有设定，那么它就是第一个运行的，否则是第二个。")]),t._v(" "),a("p",[t._v("这段代码好用，但从可读性上看远不理想。时间复杂性使这段代码很难读懂。让我们使用 JS promise 来把时间抽离出去：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" customerId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" customerPromise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupCustomer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" customerId "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ordersPromise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupOrders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" customerId "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ncustomerPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onCustomer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ordersPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onOrders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("orders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orders "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("现在回调 "),a("code",[t._v("onOrders(..)")]),t._v(" 位于回调 "),a("code",[t._v("onCustomer(..)")]),t._v(" 内部，所以它们的相对顺序得到了保证。查询的并发是通过在指定 "),a("code",[t._v("then(..)")]),t._v(" 应答处理之前分离地发起 "),a("code",[t._v("lookupCustomer(..)")]),t._v(" 和 "),a("code",[t._v("lookupOrders(..)")]),t._v(" 来实现的。")]),t._v(" "),a("p",[t._v("这可能不明显，不过要不是 Promise 的行为被定义的方式，这个代码段就会与生俱来地具有竟合状态。如果 "),a("code",[t._v("order")]),t._v(" 的查询在 "),a("code",[t._v("ordersPromise.then(..)")]),t._v(" 被调用以提供一个 "),a("code",[t._v("onOrders(..)")]),t._v(" 回调之前完成，那么 "),a("em",[t._v("某些东西")]),t._v(" 就需要足够聪明地保持 "),a("code",[t._v("orders")]),t._v(" 列表，直到 "),a("code",[t._v("onOrders(..)")]),t._v(" 可以被调用。事实上，当 "),a("code",[t._v("customer")]),t._v(" 在 "),a("code",[t._v("onCustomer(..)")]),t._v(" 指定要接受它之前出现时，同样的问题也会出现。")]),t._v(" "),a("p",[t._v("那个 "),a("em",[t._v("某些东西")]),t._v(" 就是我们在前一个代码段中讨论过的同种时间复杂性逻辑。但我们一点都不用担心这种复杂性，不管是编写代码还是 —— 更重要的 —— 阅读代码，因为 Promise 为我处理好了那种时间规范化。")]),t._v(" "),a("p",[t._v("一个 Promise 以一种时间无关的方式表示一个（未来）值。另外，从一个 Promise 中抽取值就是一个立即值同步赋值（通过 "),a("code",[t._v("=")]),t._v("）的异步形式。换句话说，一个 Promise 以一种可信（时间无关）的方式，将一个 "),a("code",[t._v("=")]),t._v(" 赋值操作分散到一段时间上。")]),t._v(" "),a("p",[t._v("现在我们将探索如何相似地将本书之前的各种同步 FP 操作分散到一段时间之上。")]),t._v(" "),a("h2",{attrs:{id:"急切-vs-懒惰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#急切-vs-懒惰","aria-hidden":"true"}},[t._v("#")]),t._v(" 急切 vs. 懒惰")]),t._v(" "),a("p",[t._v("在计算机科学中急切与懒惰不是赞美与冒犯，而是用来描述一个操作将会立即完成还是随着时间的推移进行。")]),t._v(" "),a("p",[t._v("我们在这本书中看到的 FP 操作可以被归类为急切的，因为它们同步（立即）地操作离散的立即值或者值的列表/结构。")]),t._v(" "),a("p",[t._v("回想一下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [2,4,6]")]),t._v("\n")])])]),a("p",[t._v("从 "),a("code",[t._v("a")]),t._v(" 到 "),a("code",[t._v("b")]),t._v(" 的映射是急切的，因为它立即在那一时刻操作数组 "),a("code",[t._v("a")]),t._v(" 中的所有值，并且生成一个新的数组 "),a("code",[t._v("b")]),t._v("。如果稍后你修改了 "),a("code",[t._v("a")]),t._v("（例如在它的末尾添加一个新的值），"),a("code",[t._v("b")]),t._v(" 的内容不会发生任何变化。这就是急切的 FP。")]),t._v(" "),a("p",[t._v("但懒惰的 FP 操作看起来是什么样子呢？考虑一下像这样的东西：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapLazy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])])]),a("p",[t._v("我们在这里想象的 "),a("code",[t._v("mapLazy(..)")]),t._v(" 实质上在 “监听” 数组 "),a("code",[t._v("a")]),t._v("，而且每当一个新的值添加到它的末尾时（使用 "),a("code",[t._v("push(..)")]),t._v("），它都会运行映射函数 "),a("code",[t._v("v => v * 2")]),t._v(" 并将变形后的值添加到数组 "),a("code",[t._v("b")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" "),a("code",[t._v("mapLazy(..)")]),t._v(" 的实现没有展示在这里，因为它是一个虚构的例子而不是一个真正的操作。要达成这种 "),a("code",[t._v("a")]),t._v(" 与 "),a("code",[t._v("b")]),t._v(" 之间的懒惰配对操作，我们需要比简单的数组更智能一些的东西。")]),t._v(" "),a("p",[t._v("考虑一下能够将 "),a("code",[t._v("a")]),t._v(" 与 "),a("code",[t._v("b")]),t._v(" 配对的好处，无论你什么时候（即使是异步地！）将一个值放入 "),a("code",[t._v("a")]),t._v("，它都会被变形并投射到 "),a("code",[t._v("b")]),t._v("。这具备与 "),a("code",[t._v("map(..)")]),t._v(" 操作相同的声明式 FP 力量，但是它可以被拉伸至一段时间；你不必知道 "),a("code",[t._v("a")]),t._v(" 的所有值就可以 "),a("em",[t._v("马上")]),t._v(" 建立映射。")]),t._v(" "),a("h2",{attrs:{id:"响应式-fp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式-fp","aria-hidden":"true"}},[t._v("#")]),t._v(" 响应式 FP")]),t._v(" "),a("p",[t._v("为了理解我们如何能够创建并使用两组值之间的懒惰映射，我们需要将自己对列表（数组）的想法进行一些抽象。让我们想象一种智能的数组，不是那种简单地持有值而是一种可以懒惰地对一个值进行接收和应答（也就是 “响应（reacts）”）的数组。考虑：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LazyArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everySecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("至此，这个代码段看起来与一个普通的数组没有任何不同。唯一不寻常的东西就是我们习惯于使 "),a("code",[t._v("map(..)")]),t._v(" 急切地运行并立即使用所有从 "),a("code",[t._v("a")]),t._v(" 中映射来的值生成 "),a("code",[t._v("b")]),t._v("。而那个将随机值添加到 "),a("code",[t._v("a")]),t._v(" 的计时器看起来很奇怪，因为所有那些值都是在 "),a("code",[t._v("map(..)")]),t._v(" 调用 "),a("em",[t._v("之后")]),t._v(" 才出现的。")]),t._v(" "),a("p",[t._v("但是这种虚构的 "),a("code",[t._v("lazyArray")]),t._v(" 有所不同；它假设值可能会在一段时间内一次一个地到来。在任何你希望的时候将值 "),a("code",[t._v("push(..)")]),t._v(" 进来。"),a("code",[t._v("b")]),t._v(" 将会懒惰地映射最终达到 "),a("code",[t._v("a")]),t._v(" 的任何值。")]),t._v(" "),a("p",[t._v("另外，一旦值得到处理，我们就不是很需要将它们保持在 "),a("code",[t._v("a")]),t._v(" 或 "),a("code",[t._v("b")]),t._v(" 中；这种特殊的数组仅会将值保持必要长的时间。所以这些数组不一定会随着时间增加内存的用量，这是懒惰数据结构和操作的一个重要性质。事实上，与其说它像一个数组不如说它更像一个缓冲（buffer）。")]),t._v(" "),a("p",[t._v("一个普通的数组现在持有所有的值，而因此是急切的。一个 “懒惰数组” 是一个值将会随着时间推移而到来的数组。")]),t._v(" "),a("p",[t._v("因为我们不一定知道一个新的值什么时候会到达 "),a("code",[t._v("a")]),t._v("，所以我们需要的另一个东西是，能够监听 "),a("code",[t._v("b")]),t._v(" 以便在一个新的值变得可用时它能够收到通知。我们可以将一个监听器想象成这样：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("b")]),t._v(" 是 "),a("em",[t._v("响应式")]),t._v(" 的，因为它被设置为当值进入 "),a("code",[t._v("a")]),t._v(" 时对它们进行 "),a("em",[t._v("响应")]),t._v("。FP 操作 "),a("code",[t._v("map(..)")]),t._v(" 描述了每个值如何从原来的 "),a("code",[t._v("a")]),t._v(" 变形为目标 "),a("code",[t._v("b")]),t._v("。每一个离散的映射操作都恰恰是我们对普通同步 FP 的单值操作的建模方式，但是这里我们将值的来源分散在一段时间上。")]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" 最常用于这些概念的术语是函数响应式编程（Functional Reactive Programming —— FRP）。我故意避免使用这个词，因为对于 FP + 响应式是否真正的构成了 FRP 是存在争议的。我们在这里不会完全深入 FRP 的全部含义，所以我将继续称之为响应式 FP。另一种想法是，你可以称它为事件驱动的 FP，如果这能让你明白些的话。")]),t._v(" "),a("p",[t._v("我们可以认为 "),a("code",[t._v("a")]),t._v(" 在生产值而 "),a("code",[t._v("b")]),t._v(" 在消费它们。所以为了可读性，让我们重新组织这段代码，将关注点分离为 "),a("em",[t._v("生产者")]),t._v(" 和 "),a("em",[t._v("消费者")]),t._v(" 角色：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LazyArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everySecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// **************************")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("a")]),t._v(" 是生产者，它实质上扮演了一个值的流。我们可以认为每一个值到达 "),a("code",[t._v("a")]),t._v(" 是一个 "),a("em",[t._v("事件")]),t._v("。之后 "),a("code",[t._v("map(..)")]),t._v(" 操作会触发 "),a("code",[t._v("b")]),t._v(" 上相应的事件，我们 "),a("code",[t._v("listen(..)")]),t._v(" 它来消费新的值。")]),t._v(" "),a("p",[t._v("我们分离 "),a("em",[t._v("生产者")]),t._v(" 和 "),a("em",[t._v("消费者")]),t._v(" 关注点的原因是，这样做使我们应用程序中的不同部分可以分别负责于每个关注点。这种代码组织方式可以极大地改善代码的可读性与可维护性。")]),t._v(" "),a("h3",{attrs:{id:"声明式时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明式时间","aria-hidden":"true"}},[t._v("#")]),t._v(" 声明式时间")]),t._v(" "),a("p",[t._v("我们一直对在讨论中引入时间十分小心。具体地讲，正如 promise 将时间从我们对一个单独的异步操作的关注中抽象出去一样，响应式 FP 将时间从一系列的值/操作中抽象（分离）了出去。")]),t._v(" "),a("p",[t._v("从 "),a("code",[t._v("a")]),t._v(" （生产者）的角度讲，唯一明显的时间关注点是我们的手动 "),a("code",[t._v("setInterval(..)")]),t._v(" 循环。但这只不过是为了演示。")]),t._v(" "),a("p",[t._v("想象一下，"),a("code",[t._v("a")]),t._v(" 实际上可以添附到一些其他的事件源上，比如用户的鼠标点击和键盘击键，从服务器来的 websocket 消息，等等。在那样的场景下，"),a("code",[t._v("a")]),t._v(" 自己实际上不必关心时间。它只不过是一个与时间无关的值的导管，不管值什么时候会准备好。")]),t._v(" "),a("p",[t._v("从 "),a("code",[t._v("b")]),t._v(" （消费者）的角度来说，我们不知道或关心 "),a("code",[t._v("a")]),t._v(" 中的值在何时/从何处而来。事实上，所有的值都可能已经存在了。我们关心的一切是我们需要这些值，无论它们什么时候准备好。同样，这也是与时间无关（也就是懒惰）的 "),a("code",[t._v("map(..)")]),t._v(" 变形操作的模型。")]),t._v(" "),a("p",[a("code",[t._v("a")]),t._v(" 与 "),a("code",[t._v("b")]),t._v(" 之间 "),a("em",[t._v("时间")]),t._v(" 的关系是声明式的（而且是隐含的！），不是指令式的（或者明确的）。")]),t._v(" "),a("p",[t._v("如此组织跨时间段的操作的价值可能感觉还不是特别高效。让我们把它与用指令式表达的相同功能比较一下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everySecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// **************************")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这可能看起来很微妙，但是除了 "),a("code",[t._v("b.onValue(..)")]),t._v(" 需要自己调用 "),a("code",[t._v("this.map(..)")]),t._v(" 之外，在这种指令式更强的版本和前面声明式更强的版本之间有一个重要的不同。在前一个代码段中，"),a("code",[t._v("b")]),t._v(" 从 "),a("code",[t._v("a")]),t._v(" 中拉取，但是在后一个代码段中 "),a("code",[t._v("a")]),t._v(" 向 "),a("code",[t._v("b")]),t._v(" 推送。话句话说，比较 "),a("code",[t._v("b = a.map(..)")]),t._v(" 和 "),a("code",[t._v("b.onValue(v)")]),t._v("。")]),t._v(" "),a("p",[t._v("在后面的指令式代码段中，从消费者的角度看，值 "),a("code",[t._v("v")]),t._v(" 从何而来不是很清楚（可读性的意义上）。另外，"),a("code",[t._v("b.onValue(..)")]),t._v(" 的指令式硬编码混入了生产者 "),a("code",[t._v("a")]),t._v(" 的逻辑，这有些违反了关注点分离原则。这会使独立考虑生产者和消费者更困难。")]),t._v(" "),a("p",[t._v("相比之下，在前一个代码段中，"),a("code",[t._v("b = a.map(..)")]),t._v(" 声明了 "),a("code",[t._v("b")]),t._v(" 的值源自于 "),a("code",[t._v("a")]),t._v("，而且将 "),a("code",[t._v("a")]),t._v(" 视为我们在那一刻不必关心的抽象事件流数据源。我们 "),a("em",[t._v("声明")]),t._v("：任何来自于 "),a("code",[t._v("a")]),t._v(" 的值在进入 "),a("code",[t._v("b")]),t._v(" 之前都会经过指定的 "),a("code",[t._v("map(..)")]),t._v(" 操作。")]),t._v(" "),a("h3",{attrs:{id:"不只是映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不只是映射","aria-hidden":"true"}},[t._v("#")]),t._v(" 不只是映射")]),t._v(" "),a("p",[t._v("为了方便起见，我们通过一对一的 "),a("code",[t._v("map(..)")]),t._v(" 展示了这种将 "),a("code",[t._v("a")]),t._v(" 与 "),a("code",[t._v("b")]),t._v(" 配对的概念。但是许多其他的 FP 操作同样可以被模型化为跨时段的。")]),t._v(" "),a("p",[t._v("考虑如下代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isOdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onlyOdds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Odd:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这里，一个来自于 "),a("code",[t._v("a")]),t._v(" 的值仅会在通过 "),a("code",[t._v("isOdd(..)")]),t._v(" 判定时才会进入 "),a("code",[t._v("b")]),t._v("。")]),t._v(" "),a("p",[t._v("甚至 "),a("code",[t._v("reduce(..)")]),t._v(" 都可以模型化为跨时段的：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("runningTotal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New current total:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("因为我们没有给 "),a("code",[t._v("reduce(..)")]),t._v(" 调用指定 "),a("code",[t._v("initialValue")]),t._v("，所以在至少两个值通过 "),a("code",[t._v("a")]),t._v(" 之前，递减函数 "),a("code",[t._v("sum(..)")]),t._v(" 和事件回调 "),a("code",[t._v("runningTotal(..)")]),t._v(" 都不会被调用。")]),t._v(" "),a("p",[t._v("这个代码段暗示递减具有某种 "),a("em",[t._v("记忆")]),t._v("，每当一个未来值到达的时候，"),a("code",[t._v("sum(..)")]),t._v(" 递减函数都将带着前一个 "),a("code",[t._v("total")]),t._v(" 以及新的下一个值 "),a("code",[t._v("v")]),t._v(" 进行调用。")]),t._v(" "),a("p",[t._v("其他扩展至跨时段的 FP 操作甚至会引入一个内部缓冲，例如 "),a("code",[t._v("unique(..)")]),t._v(" 会持续追踪每个目前为止遇到的值。")]),t._v(" "),a("h3",{attrs:{id:"observables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#observables","aria-hidden":"true"}},[t._v("#")]),t._v(" Observables")]),t._v(" "),a("p",[t._v("希望你现在明白了一个响应式、事件驱动、类似数组 —— 就如我们虚构的 "),a("code",[t._v("LazyArray")]),t._v(" 那样 —— 的结构有多么重要。好消息是，这种数据结构已经存在了，它被称为 Observable。")]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" 提前说明一下：接下来的讨论只是对 Observable 世界的一个简要介绍。它是一个深刻得多的话题，受篇幅所限我们无法完整地探索它。但如果你已经理解了这本书中的轻量函数式编程，而且现在又理解了异步时序如何通过 FP 原理建模，那么你继续学习 Observable 应当是非常自然的事情。")]),t._v(" "),a("p",[t._v("Observable 已经由好几种第三方库实现了，最著名的就是 "),a("a",{attrs:{href:"https://github.com/Reactive-Extensions/RxJS",target:"_blank",rel:"noopener noreferrer"}},[t._v("RxJS"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://github.com/cujojs/most",target:"_blank",rel:"noopener noreferrer"}},[t._v("Most"),a("OutboundLink")],1),t._v("。在本书写作时，一个将 Observable 原生地加入到 JS 中 —— 就像 Promise 被加入 ES6 一样 —— 的提案已经提上日程。为了展示，我们将在接下来的例子中使用 RxJS 风格的 Observable。")]),t._v(" "),a("p",[t._v("这是我们先前的响应式的例子，使用 observable 来代替 "),a("code",[t._v("LazyArray")]),t._v(" 表达的话：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Subject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everySecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// **************************")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在 RxJS 的世界中，一个 Observer 订阅（subscribe）一个 Observable。如果你组合一个 Observer 和一个 Observable 的功能，你就得到一个 Subject。为了使我们的代码段简单一些，我们将 "),a("code",[t._v("a")]),t._v(" 构建为一个 Subject，这样我们就可以在它上面调用 "),a("code",[t._v("next(..)")]),t._v(" 来将值（事件）推送到它的流中。")]),t._v(" "),a("p",[t._v("如果我们想要让 Observer 和 Observable 保持分离：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onObserve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("observer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everySecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在这个代码段中 "),a("code",[t._v("a")]),t._v(" 是 Observable，不出意料地，分离的 Observer 被称为 "),a("code",[t._v("observer")]),t._v("；它能够 “观察（observe）” 一些事件（比如我们的 "),a("code",[t._v("setInterval(..)")]),t._v(" 循环）；我们使用它的 "),a("code",[t._v("next(..)")]),t._v(" 方法来将事件发送到 "),a("code",[t._v("a")]),t._v(" 的可观察流中。")]),t._v(" "),a("p",[t._v("除了 "),a("code",[t._v("map(..)")]),t._v(" 之外，RxJS 还定义了超过一百种可以在每一个新的值到来时被懒惰调用的操作符。就像数组一样，每个 Observable 上的操作符都返回一个新的 Observable，这意味着它们是可链接的。如果一个操作符函数的调用判定一个从输入 Observable 来的值应当被传递下去，那么它就会在输出的 Observable 上被触发；否则就会被丢弃掉。")]),t._v(" "),a("p",[t._v("一个声明式 Observable 链的例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    a\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仅允许奇数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("distinctUntilChanged")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仅允许接连的变化")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("throttle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放慢一些")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将它们翻倍")]),t._v("\n\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Next:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("注意：")]),t._v(" 没必要将 observable 赋值给 "),a("code",[t._v("b")]),t._v(" 然后再与链条分开地调用 "),a("code",[t._v("b.subscribe(..)")]),t._v("；这里只是为了证实每个操作符都从前一个 observable 返回一个新的 observable。你会发现，在许多代码示例中 "),a("code",[t._v("subscribe(..)")]),t._v(" 调用都是链条中的最后一个方法。因为 "),a("code",[t._v("subscribe(..)")]),t._v(" 在技术上改变了 Observable 的内部状态，所以 FP 程序员们一般喜欢将这两步分开，更清晰地标识副作用。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("这本书详细讲解了许多种 FP 操作，它们接收一个值（或者一个立即值的列表）并将它们变形为另一个或一些值。")]),t._v(" "),a("p",[t._v("对于那些将要跨时段处理的操作，所有这些基础的 FP 原理都可以独立于时间应用。正如 promise 模型化了单一未来值，我们可以将急切的列表模型化为值的懒惰 Observable （事件）流，这些值可能会一次一个地到来。")]),t._v(" "),a("p",[t._v("一个数组上的 "),a("code",[t._v("map(..)")]),t._v(" 对当前数组中的每一个值运行映射函数，将所有映射出来的值放入一个结果数组。一个 Observable 上的 "),a("code",[t._v("map(..)")]),t._v(" 为每一个值运行映射函数，无论它什么时候到来，并将所有映射出的值推送到输出 Observable。")]),t._v(" "),a("p",[t._v("换言之，如果对 FP 操作来说一个数组是一个急切的数据结构，那么一个 Observable 就是它对应的懒惰跨时段版本。")]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" 有一种不同的异步 FP 变种，看看一个称为 "),a("router-link",{attrs:{to:"/module_book/JS/Functional-Light-JS-zh/apC.md/#bonus-2-fasy"}},[a("strong",[t._v("fasy")]),t._v(" 的库，附录C中将讨论它")]),t._v("。")],1)])},[],!1,null,null,null);s.default=e.exports}}]);