(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{229:function(v,_,t){v.exports=t.p+"assets/img/fig1.f7ac9d2a.png"},446:function(v,_,t){"use strict";t.r(_);var a=t(0),e=Object(a.a)({},function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"第一章：什么是作用域？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章：什么是作用域？","aria-hidden":"true"}},[v._v("#")]),v._v(" 第一章：什么是作用域？")]),v._v(" "),a("p",[v._v("几乎所有语言的最基础模型之一就是在变量中存储值，并且在稍后取出或修改这些值的能力。事实上，在变量中存储值和取出值的能力，给程序赋予了 "),a("em",[v._v("状态")]),v._v("。")]),v._v(" "),a("p",[v._v("如果没有这样的概念，一个程序虽然可以执行一些任务，但是它们将会受到极大的限制而且不会非常有趣。")]),v._v(" "),a("p",[v._v("但是在我们的程序中纳入变量，引出了我们现在将要解决的最有趣的问题：这些变量 "),a("em",[v._v("存活")]),v._v(" 在哪里？换句话说，它们被存储在哪儿？而且，最重要的是，我们的程序如何在需要它们的时候找到它们？")]),v._v(" "),a("p",[v._v("回答这些问题需要一组明确定义的规则，它定义如何在某些位置存储变量，以及如何在稍后找到这些变量。我们称这组规则为："),a("em",[v._v("作用域")]),v._v("。")]),v._v(" "),a("p",[v._v("但是，这些 "),a("em",[v._v("作用域")]),v._v(" 规则是在哪里、如何被设置的？")]),v._v(" "),a("h2",{attrs:{id:"编译器理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器理论","aria-hidden":"true"}},[v._v("#")]),v._v(" 编译器理论")]),v._v(" "),a("p",[v._v("根据你与各种编程语言打交道的水平不同，这也许是不证自明的，或者这也许令人吃惊，尽管 JavaScript 一般被划分到“动态”或者“解释型”语言的范畴，但是其实它是一个编译型语言。它 "),a("em",[v._v("不是")]),v._v(" 像许多传统意义上的编译型语言那样预先被编译好，编译的结果也不能在各种不同的分布式系统间移植。")]),v._v(" "),a("p",[v._v("但是无论如何，JavaScript 引擎在实施许多与传统的语言编译器相同的步骤，虽然是以一种我们不易察觉的更精巧的方式。")]),v._v(" "),a("p",[v._v("在传统的编译型语言处理中，一块儿源代码，你的程序，在它被执行 "),a("em",[v._v("之前")]),v._v(" 通常将会经历三个步骤，大致被称为“编译”：")]),v._v(" "),a("ol",[a("li",[a("p",[a("strong",[v._v("分词/词法分析：")]),v._v(" 将一连串字符打断成（对于语言来说）有意义的片段，称为 token（记号）。举例来说，考虑这段程序："),a("code",[v._v("var a = 2;")]),v._v("。这段程序很可能会被打断成如下 token："),a("code",[v._v("var")]),v._v("，"),a("code",[v._v("a")]),v._v("，"),a("code",[v._v("=")]),v._v("，"),a("code",[v._v("2")]),v._v("，和 "),a("code",[v._v(";")]),v._v("。空格也许会被保留为一个 token，这要看它是否是有意义的。")]),v._v(" "),a("p",[a("strong",[v._v("注意：")]),v._v(" 分词和词法分析之间的区别是微妙和学术上的，其中心在于这些 token 是否以 "),a("em",[v._v("无状态")]),v._v(" 或 "),a("em",[v._v("有状态")]),v._v(" 的方式被识别。简而言之，如果分词器去调用有状态的解析规则来弄清"),a("code",[v._v("a")]),v._v("是否应当被考虑为一个不同的 token，还是只是其他 token 的一部分，那么这就是 "),a("strong",[v._v("词法分析")]),v._v("。")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("解析：")]),v._v(" 将一个 token 的流（数组）转换为一个嵌套元素的树，它综合地表示了程序的语法结构。这棵树称为“抽象语法树”（AST —— "),a("b",[v._v("A")]),v._v("bstract "),a("b",[v._v("S")]),v._v("yntax "),a("b",[v._v("T")]),v._v("ree）。")]),v._v(" "),a("p",[a("code",[v._v("var a = 2;")]),v._v(" 的树也许开始于称为 "),a("code",[v._v("VariableDeclaration")]),v._v("（变量声明）顶层节点，带有一个称为 "),a("code",[v._v("Identifier")]),v._v("（标识符）的子节点（它的值为 "),a("code",[v._v("a")]),v._v("），和另一个称为 "),a("code",[v._v("AssignmentExpression")]),v._v("（赋值表达式）的子节点，而这个子节点本身带有一个称为 "),a("code",[v._v("NumericLiteral")]),v._v("（数字字面量）的子节点（它的值为"),a("code",[v._v("2")]),v._v("）。")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("代码生成：")]),v._v(" 这个处理将抽象语法树转换为可执行的代码。这一部分将根据语言，它的目标平台等因素有很大的不同。")]),v._v(" "),a("p",[v._v("所以，与其深陷细节，我们不如笼统地说，有一种方法将我们上面描述的 "),a("code",[v._v("var a = 2;")]),v._v(" 的抽象语法树转换为机器指令，来实际上 "),a("em",[v._v("创建")]),v._v(" 一个称为 "),a("code",[v._v("a")]),v._v(" 的变量（包括分配内存等等），然后在 "),a("code",[v._v("a")]),v._v(" 中存入一个值。")]),v._v(" "),a("p",[a("strong",[v._v("注意：")]),v._v(" 引擎如何管理系统资源的细节远比我们要挖掘的东西深刻，所以我们将理所当然地认为引擎有能力按其需要创建和存储变量。")])])]),v._v(" "),a("p",[v._v("和大多数其他语言的编译器一样，JavaScript 引擎要比这区区三步复杂太多了。例如，在解析和代码生成的处理中，一定会存在优化执行效率的步骤，包括压缩冗余元素，等等。")]),v._v(" "),a("p",[v._v("所以，我在此描绘的只是大框架。但是我想你很快就会明白为什么我们涵盖的这些细节是重要的，虽然是在很高的层次上。")]),v._v(" "),a("p",[v._v("其一，JavaScript 引擎没有（像其他语言的编译器那样）大把的时间去优化，因为 JavaScript 的编译和其他语言不同，不是提前发生在一个构建的步骤中。")]),v._v(" "),a("p",[v._v("对 JavaScript 来说，在许多情况下，编译发生在代码被执行前的仅仅几微秒之内（或更少！）。为了确保最快的性能，JS 引擎将使用所有的招数（比如 JIT，它可以懒编译甚至是热编译，等等），而这远超出了我们关于“作用域”的讨论。")]),v._v(" "),a("p",[v._v("为了简单起见，我们可以说，任何 JavaScript 代码段在它执行之前（通常是 "),a("em",[v._v("刚好")]),v._v(" 在它执行之前！）都必须被编译。所以，JS 编译器将把程序 "),a("code",[v._v("var a = 2;")]),v._v(" 拿过来，并首先编译它，然后准备运行它，通常是立即的。")]),v._v(" "),a("h2",{attrs:{id:"理解作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解作用域","aria-hidden":"true"}},[v._v("#")]),v._v(" 理解作用域")]),v._v(" "),a("p",[v._v("我们将采用的学习作用域的方法，是将这个处理过程想象为一场对话。但是，"),a("em",[v._v("谁")]),v._v(" 在进行这场对话呢？")]),v._v(" "),a("h3",{attrs:{id:"演员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#演员","aria-hidden":"true"}},[v._v("#")]),v._v(" 演员")]),v._v(" "),a("p",[v._v("让我们见一见处理程序 "),a("code",[v._v("var a = 2;")]),v._v(" 时进行互动的演员吧，这样我们就能理解稍后将要听到的它们的对话：")]),v._v(" "),a("ol",[a("li",[a("p",[a("em",[v._v("引擎")]),v._v("：负责从始至终的编译和执行我们的 JavaScript 程序。")])]),v._v(" "),a("li",[a("p",[a("em",[v._v("编译器")]),v._v("："),a("em",[v._v("引擎")]),v._v(" 的朋友之一；处理所有的解析和代码生成的重活儿（见前一节）。")])]),v._v(" "),a("li",[a("p",[a("em",[v._v("作用域")]),v._v("："),a("em",[v._v("引擎")]),v._v(" 的另一个朋友；收集并维护一张所有被声明的标识符（变量）的列表，并对当前执行中的代码如何访问这些变量强制实施一组严格的规则。")])])]),v._v(" "),a("p",[v._v("为了 "),a("em",[v._v("全面理解")]),v._v(" JavaScript 是如何工作的，你需要开始像 "),a("em",[v._v("引擎")]),v._v("（和它的朋友们）那样 "),a("em",[v._v("思考")]),v._v("，问它们问的问题，并像它们一样回答。")]),v._v(" "),a("h3",{attrs:{id:"反复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反复","aria-hidden":"true"}},[v._v("#")]),v._v(" 反复")]),v._v(" "),a("p",[v._v("当你看到程序 "),a("code",[v._v("var a = 2;")]),v._v(" 时，你很可能认为它是一个语句。但这不是我们的新朋友 "),a("em",[v._v("引擎")]),v._v(" 所看到的。事实上，"),a("em",[v._v("引擎")]),v._v(" 看到两个不同的语句，一个是 "),a("em",[v._v("编译器")]),v._v(" 将在编译期间处理的，一个是 "),a("em",[v._v("引擎")]),v._v(" 将在执行期间处理的。")]),v._v(" "),a("p",[v._v("那么，让我们来分析 "),a("em",[v._v("引擎")]),v._v(" 和它的朋友们将如何处理程序 "),a("code",[v._v("var a = 2;")]),v._v("。")]),v._v(" "),a("p",[a("em",[v._v("编译器")]),v._v(" 将对这个程序做的第一件事情，是进行词法分析来将它分解为一系列 token，然后这些 token 被解析为一棵树。但是当 "),a("em",[v._v("编译器")]),v._v(" 到了代码生成阶段时，它会以一种与我们可能想象的不同的方式来对待这段程序。")]),v._v(" "),a("p",[v._v("一个合理的假设是，"),a("em",[v._v("编译器")]),v._v(" 将产生的代码可以用这种假想代码概括：“为一个变量分配内存，将它标记为 "),a("code",[v._v("a")]),v._v("，然后将值 "),a("code",[v._v("2")]),v._v(" 贴在这个变量里”。不幸的是，这不是十分准确。")]),v._v(" "),a("p",[a("em",[v._v("编译器")]),v._v(" 将会这样处理：")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("遇到 "),a("code",[v._v("var a")]),v._v("，"),a("em",[v._v("编译器")]),v._v(" 让 "),a("em",[v._v("作用域")]),v._v(" 去查看对于这个特定的作用域集合，变量 "),a("code",[v._v("a")]),v._v(" 是否已经存在了。如果是，"),a("em",[v._v("编译器")]),v._v(" 就忽略这个声明并继续前进。否则，"),a("em",[v._v("编译器")]),v._v(" 就让 "),a("em",[v._v("作用域")]),v._v(" 去为这个作用域集合声明一个称为 "),a("code",[v._v("a")]),v._v(" 的新变量。")])]),v._v(" "),a("li",[a("p",[v._v("然后 "),a("em",[v._v("编译器")]),v._v(" 为 "),a("em",[v._v("引擎")]),v._v(" 生成稍后要执行的代码，来处理赋值 "),a("code",[v._v("a = 2")]),v._v("。"),a("em",[v._v("引擎")]),v._v(" 运行的代码首先让 "),a("em",[v._v("作用域")]),v._v(" 去查看在当前的作用域集合中是否有一个称为 "),a("code",[v._v("a")]),v._v(" 的变量可以访问。如果有，"),a("em",[v._v("引擎")]),v._v(" 就使用这个变量。如果没有，"),a("em",[v._v("引擎")]),v._v(" 就查看 "),a("em",[v._v("其他地方")]),v._v("（参见下面的嵌套 "),a("em",[v._v("作用域")]),v._v(" 一节）。")])])]),v._v(" "),a("p",[v._v("如果 "),a("em",[v._v("引擎")]),v._v(" 最终找到一个变量，它就将值 "),a("code",[v._v("2")]),v._v(" 赋予它。如果没有，"),a("em",[v._v("引擎")]),v._v(" 将会举起它的手并喊出一个错误！")]),v._v(" "),a("p",[v._v("总结来说：对于一个变量赋值，发生了两个不同的动作：第一，"),a("em",[v._v("编译器")]),v._v(" 声明一个变量（如果先前没有在当前作用域中声明过），第二，当执行时，"),a("em",[v._v("引擎")]),v._v(" 在 "),a("em",[v._v("作用域")]),v._v(" 中查询这个变量并给它赋值，如果找到的话。")]),v._v(" "),a("h3",{attrs:{id:"编译器术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器术语","aria-hidden":"true"}},[v._v("#")]),v._v(" 编译器术语")]),v._v(" "),a("p",[v._v("为了继续更深入地理解，我们需要一点儿更多的编译器术语。")]),v._v(" "),a("p",[v._v("当 "),a("em",[v._v("引擎")]),v._v(" 执行 "),a("em",[v._v("编译器")]),v._v(" 在第二步为它产生的代码时，它必须查询变量 "),a("code",[v._v("a")]),v._v(" 来看它是否已经被声明过了，而且这个查询是咨询 "),a("em",[v._v("作用域")]),v._v(" 的。但是 "),a("em",[v._v("引擎")]),v._v(" 所实施的查询的类型会影响查询的结果。")]),v._v(" "),a("p",[v._v("在我们这个例子中，"),a("em",[v._v("引擎")]),v._v(" 将会对变量 "),a("code",[v._v("a")]),v._v(" 实施一个“LHS”查询。另一种类型的查询称为“RHS”。")]),v._v(" "),a("p",[v._v("我打赌你能猜出“L”和“R”是什么意思。这两个术语表示“Left-hand Side（左手边）”和“Right-hand Side（右手边）”")]),v._v(" "),a("p",[v._v("什么的……边？"),a("strong",[v._v("赋值操作的。")])]),v._v(" "),a("p",[v._v("换言之，当一个变量出现在赋值操作的左手边时，会进行 LHS 查询，当一个变量出现在赋值操作的右手边时，会进行 RHS 查询。")]),v._v(" "),a("p",[v._v("实际上，我们可以表述得更准确一点儿。对于我们的目的来说，一个 RHS 是难以察觉的，因为它简单地查询某个变量的值，而 LHS 查询是试着找到变量容器本身，以便它可以赋值。从这种意义上说，RHS 的含义实质上不是 "),a("em",[v._v("真正的")]),v._v(" “一个赋值的右手边”，更准确地说，它只是意味着“不是左手边”。")]),v._v(" "),a("p",[v._v("在这一番油腔滑调之后，你也可以认为“RHS”意味着“取得他/她的源（值）”，暗示着 RHS 的意思是“去取……的值”。")]),v._v(" "),a("p",[v._v("让我们挖掘得更深一些。")]),v._v(" "),a("p",[v._v("当我说：")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[v._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),a("p",[v._v("这个指向 "),a("code",[v._v("a")]),v._v(" 的引用是一个 RHS 引用，因为这里没有东西被赋值给 "),a("code",[v._v("a")]),v._v("。而是我们在查询 "),a("code",[v._v("a")]),v._v(" 并取得它的值，这样这个值可以被传递进 "),a("code",[v._v("console.log(..)")]),v._v("。")]),v._v(" "),a("p",[v._v("作为对比：")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[v._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),a("p",[v._v("这里指向 "),a("code",[v._v("a")]),v._v(" 的引用是一个 LHS 引用，因为我们实际上不关心当前的值是什么，我们只是想找到这个变量，将它作为 "),a("code",[v._v("= 2")]),v._v(" 赋值操作的目标。")]),v._v(" "),a("p",[a("strong",[v._v("注意：")]),v._v(" LHS 和 RHS 意味着“赋值的左/右手边”未必像字面上那样意味着“ "),a("code",[v._v("=")]),v._v(" 赋值操作符的左/右边”。赋值有几种其他的发生形式，所以最好在概念上将它考虑为：“赋值的目标（LHS）”和“赋值的源（RHS）”。")]),v._v(" "),a("p",[v._v("考虑这段程序，它既有 LHS 引用又有 RHS 引用：")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 2")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),a("p",[v._v("调用 "),a("code",[v._v("foo(..)")]),v._v(" 的最后一行作为一个函数调用要求一个指向 "),a("code",[v._v("foo")]),v._v(" 的 RHS 引用，意味着，“去查询 "),a("code",[v._v("foo")]),v._v(" 的值，并把它交给我”。另外，"),a("code",[v._v("(..)")]),v._v(" 意味着 "),a("code",[v._v("foo")]),v._v(" 的值应当被执行，所以它最好实际上是一个函数！")]),v._v(" "),a("p",[v._v("这里有一个微妙但重要的赋值。"),a("strong",[v._v("你发现了吗？")])]),v._v(" "),a("p",[v._v("你可能错过了这个代码段隐含的 "),a("code",[v._v("a = 2")]),v._v("。它发生在当值 "),a("code",[v._v("2")]),v._v(" 作为参数值传递给 "),a("code",[v._v("foo(..)")]),v._v(" 函数时，值 "),a("code",[v._v("2")]),v._v(" "),a("strong",[v._v("被赋值")]),v._v(" 给了参数 "),a("code",[v._v("a")]),v._v("。为了（隐含地）给参数 "),a("code",[v._v("a")]),v._v(" 赋值，进行了一个 LHS 查询。")]),v._v(" "),a("p",[v._v("这里还有一个 "),a("code",[v._v("a")]),v._v(" 的值的 RHS 引用，它的结果值被传入 "),a("code",[v._v("console.log(..)")]),v._v("。"),a("code",[v._v("console.log(..)")]),v._v(" 需要一个引用来执行。它为 "),a("code",[v._v("console")]),v._v(" 对象进行一个 RHS 查询，然后发生一个属性解析来看它是否拥有一个称为 "),a("code",[v._v("log")]),v._v(" 的方法。")]),v._v(" "),a("p",[v._v("最后，我们可以将这一过程概念化为，在将值 "),a("code",[v._v("2")]),v._v("（通过变量 "),a("code",[v._v("a")]),v._v(" 的 RHS 查询得到的）传入 "),a("code",[v._v("log(..)")]),v._v(" 时发生了一次 LHS/RHS 的交换。在 "),a("code",[v._v("log(..)")]),v._v(" 的原生实现内部，我们可以假定它拥有参数，其中的第一个（也许被称为 "),a("code",[v._v("arg1")]),v._v("）在 "),a("code",[v._v("2")]),v._v(" 被赋值给它之前，进行了一次 LHS 引用查询。")]),v._v(" "),a("p",[a("strong",[v._v("注意：")]),v._v(" 你可能会试图将函数声明 "),a("code",[v._v("function foo(a) {...")]),v._v(" 概念化为一个普通的变量声明和赋值，比如 "),a("code",[v._v("var foo")]),v._v(" 和 "),a("code",[v._v("foo = function(a){...")]),v._v("。这样做会诱使你认为函数声明涉及了一次 LHS 查询。")]),v._v(" "),a("p",[v._v("然而，一个微妙但重要的不同是，在这种情况下 "),a("em",[v._v("编译器")]),v._v(" 在代码生成期间同时处理声明和值的定义，如此当 "),a("em",[v._v("引擎")]),v._v(" 执行代码时，没有必要将一个函数值“赋予” "),a("code",[v._v("foo")]),v._v("。因此，将函数声明考虑为一个我们在这里讨论的 LHS 查询赋值是不太合适的。")]),v._v(" "),a("h3",{attrs:{id:"引擎-作用域对话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引擎-作用域对话","aria-hidden":"true"}},[v._v("#")]),v._v(" 引擎/作用域对话")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 2")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),a("p",[v._v("让我们将上面的（处理这个代码段的）交互想象为一场对话。这场对话将会有点儿像这样进行：")]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：嘿 "),a("em",[v._v("作用域")]),v._v("，我有一个 "),a("code",[v._v("foo")]),v._v(" 的 RHS 引用。听说过它吗？")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("作用域")])]),v._v("；啊，是的，听说过。"),a("em",[v._v("编译器")]),v._v(" 刚在一秒钟之前声明了它。它是一个函数。给你。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：太棒了，谢谢！好的，我要执行 "),a("code",[v._v("foo")]),v._v(" 了。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：嘿，"),a("em",[v._v("作用域")]),v._v("，我得到了一个 "),a("code",[v._v("a")]),v._v(" 的 LHS 引用，听说过它吗？")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("作用域")])]),v._v("：啊，是的，听说过。"),a("em",[v._v("编译器")]),v._v(" 刚才将它声明为 "),a("code",[v._v("foo")]),v._v(" 的一个正式参数了。给你。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：一如既往的给力，"),a("em",[v._v("作用域")]),v._v("。再次感谢你。现在，该把 "),a("code",[v._v("2")]),v._v(" 赋值给 "),a("code",[v._v("a")]),v._v(" 了。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：嘿，"),a("em",[v._v("作用域")]),v._v("，很抱歉又一次打扰你。我需要 RHS 查询 "),a("code",[v._v("console")]),v._v("。听说过它吗？")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("作用域")])]),v._v("：没关系，"),a("em",[v._v("引擎")]),v._v("，这是我一天到晚的工作。是的，我得到 "),a("code",[v._v("console")]),v._v(" 了。它是一个内建对象。给你。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：完美。查找 "),a("code",[v._v("log(..)")]),v._v("。好的，很好，它是一个函数。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：嘿，"),a("em",[v._v("作用域")]),v._v("。你能帮我查一下 "),a("code",[v._v("a")]),v._v(" 的 RHS 引用吗？我想我记得它，但只是想再次确认一下。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("作用域")])]),v._v("：你是对的，"),a("em",[v._v("引擎")]),v._v("。同一个家伙，没变。给你。")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：酷。传递 "),a("code",[v._v("a")]),v._v(" 的值，也就是 "),a("code",[v._v("2")]),v._v("，给 "),a("code",[v._v("log(..)")]),v._v("。")])]),v._v(" "),a("blockquote",[a("p",[v._v("...")])]),v._v(" "),a("h3",{attrs:{id:"小测验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小测验","aria-hidden":"true"}},[v._v("#")]),v._v(" 小测验")]),v._v(" "),a("p",[v._v("检查你到目前为止的理解。确保你扮演 "),a("em",[v._v("引擎")]),v._v("，并与 "),a("em",[v._v("作用域")]),v._v(" “对话”：")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),a("ol",[a("li",[a("p",[v._v("找到所有的 LHS 查询（有3处！）。")])]),v._v(" "),a("li",[a("p",[v._v("找到所有的 RHS 查询（有4处！）。")])])]),v._v(" "),a("p",[a("strong",[v._v("注意：")]),v._v(" 小测验答案参见本章的复习部分！")]),v._v(" "),a("h2",{attrs:{id:"嵌套的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套的作用域","aria-hidden":"true"}},[v._v("#")]),v._v(" 嵌套的作用域")]),v._v(" "),a("p",[v._v("我们说过 "),a("em",[v._v("作用域")]),v._v(" 是通过标识符名称查询变量的一组规则。但是，通常会有多于一个的 "),a("em",[v._v("作用域")]),v._v(" 需要考虑。")]),v._v(" "),a("p",[v._v("就像一个代码块儿或函数被嵌套在另一个代码块儿或函数中一样，作用域被嵌套在其他的作用域中。所以，如果在直接作用域中找不到一个变量的话，"),a("em",[v._v("引擎")]),v._v(" 就会咨询下一个外层作用域，如此继续直到找到这个变量或者到达最外层作用域（也就是全局作用域）。")]),v._v(" "),a("p",[v._v("考虑这段代码：")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 4")]),v._v("\n")])])]),a("p",[a("code",[v._v("b")]),v._v(" 的 RHS 引用不能在函数 "),a("code",[v._v("foo")]),v._v(" 的内部被解析，但是可以在它的外围 "),a("em",[v._v("作用域")]),v._v("（这个例子中是全局作用域）中解析。")]),v._v(" "),a("p",[v._v("所以，重返 "),a("em",[v._v("引擎")]),v._v(" 和 "),a("em",[v._v("作用域")]),v._v(" 的对话，我们会听到：")]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：“嘿，"),a("code",[v._v("foo")]),v._v(" 的 "),a("em",[v._v("作用域")]),v._v("，听说过 "),a("code",[v._v("b")]),v._v(" 吗？我得到一个它的 RHS 引用。”")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("作用域")])]),v._v("：“没有，从没听说过。问问别人吧。”")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("引擎")])]),v._v("：“嘿，"),a("code",[v._v("foo")]),v._v(" 外面的 "),a("em",[v._v("作用域")]),v._v("，哦，你是全局 "),a("em",[v._v("作用域")]),v._v("，好吧，酷。听说过 "),a("code",[v._v("b")]),v._v(" 吗？我得到一个它的 RHS 引用。”")])]),v._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[v._v("作用域")])]),v._v("：“是的，当然有。给你。”")])]),v._v(" "),a("p",[v._v("遍历嵌套 "),a("em",[v._v("作用域")]),v._v(" 的简单规则："),a("em",[v._v("引擎")]),v._v(" 从当前执行的 "),a("em",[v._v("作用域")]),v._v(" 开始，在那里查找变量，如果没有找到，就向上走一级继续查找，如此类推。如果到了最外层的全局作用域，那么查找就会停止，无论它是否找到了变量。")]),v._v(" "),a("h3",{attrs:{id:"建筑的隐喻"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建筑的隐喻","aria-hidden":"true"}},[v._v("#")]),v._v(" 建筑的隐喻")]),v._v(" "),a("p",[v._v("为了将嵌套 "),a("em",[v._v("作用域")]),v._v(" 解析的过程可视化，我想让你考虑一下这个高层建筑。")]),v._v(" "),a("img",{attrs:{src:t(229),width:"250"}}),v._v(" "),a("p",[v._v("这个建筑物表示我们程序的嵌套 "),a("em",[v._v("作用域")]),v._v(" 规则集合。无论你在哪里，建筑的第一层表示你当前执行的 "),a("em",[v._v("作用域")]),v._v("。建筑的顶层表示全局 "),a("em",[v._v("作用域")]),v._v("。")]),v._v(" "),a("p",[v._v("你通过在你当前的楼层中查找来解析 LHS 和 RHS 引用，如果你没有找到它，就坐电梯到上一层楼，在那里寻找，然后再上一层，如此类推。一旦你到了顶层（全局 "),a("em",[v._v("作用域")]),v._v("），你要么找到了你想要的东西，要么没有。但是不管怎样你都不得不停止了。")]),v._v(" "),a("h2",{attrs:{id:"错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误","aria-hidden":"true"}},[v._v("#")]),v._v(" 错误")]),v._v(" "),a("p",[v._v("为什么我们区别 LHS 和 RHS 那么重要？")]),v._v(" "),a("p",[v._v("因为在变量还没有被声明（在所有被查询的 "),a("em",[v._v("作用域")]),v._v(" 中都没找到）的情况下，这两种类型的查询的行为不同。")]),v._v(" "),a("p",[v._v("考虑如下代码：")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\tb "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),a("p",[v._v("当 "),a("code",[v._v("b")]),v._v(" 的 RHS 查询第一次发生时，它是找不到的。它被说成是一个“未声明”的变量，因为它在作用域中找不到。")]),v._v(" "),a("p",[v._v("如果 RHS 查询在嵌套的 "),a("em",[v._v("作用域")]),v._v(" 的任何地方都找不到一个值，这会导致 "),a("em",[v._v("引擎")]),v._v(" 抛出一个 "),a("code",[v._v("ReferenceError")]),v._v("。必须要注意的是这个错误的类型是 "),a("code",[v._v("ReferenceError")]),v._v("。")]),v._v(" "),a("p",[v._v("相比之下，如果 "),a("em",[v._v("引擎")]),v._v(" 在进行一个 LHS 查询，但到达了顶层（全局 "),a("em",[v._v("作用域")]),v._v("）都没有找到它，而且如果程序没有运行在“Strict模式”[^note-strictmode]下，那么这个全局 "),a("em",[v._v("作用域")]),v._v(" 将会在 "),a("strong",[v._v("全局作用域中")]),v._v(" 创建一个同名的新变量，并把它交还给 "),a("em",[v._v("引擎")]),v._v("。")]),v._v(" "),a("p",[a("em",[v._v("“不，之前没有这样的东西，但是我可以帮忙给你创建一个。”")])]),v._v(" "),a("p",[v._v("在 ES5 中被加入的“Strict模式”[^note-strictmode]，有许多与一般/宽松/懒惰模式不同的行为。其中之一就是不允许自动/隐含的全局变量创建。在这种情况下，将不会有全局 "),a("em",[v._v("作用域")]),v._v(" 的变量交回给 LHS 查询，并且类似于 RHS 的情况, "),a("em",[v._v("引擎")]),v._v(" 将抛出一个 "),a("code",[v._v("ReferenceError")]),v._v("。")]),v._v(" "),a("p",[v._v("现在，如果一个 RHS 查询的变量被找到了，但是你试着去做一些这个值不可能做到的事，比如将一个非函数的值作为函数运行，或者引用 "),a("code",[v._v("null")]),v._v(" 或者 "),a("code",[v._v("undefined")]),v._v(" 值的属性，那么 "),a("em",[v._v("引擎")]),v._v(" 就会抛出一个不同种类的错误，称为 "),a("code",[v._v("TypeError")]),v._v("。")]),v._v(" "),a("p",[a("code",[v._v("ReferenceError")]),v._v(" 是关于 "),a("em",[v._v("作用域")]),v._v(" 解析失败的，而 "),a("code",[v._v("TypeError")]),v._v(" 暗示着 "),a("em",[v._v("作用域")]),v._v(" 解析成功了，但是试图对这个结果进行了一个非法/不可能的动作。")]),v._v(" "),a("h2",{attrs:{id:"复习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复习","aria-hidden":"true"}},[v._v("#")]),v._v(" 复习")]),v._v(" "),a("p",[v._v("作用域是一组规则，它决定了一个变量（标识符）在哪里和如何被查找。这种查询也许是为了向这个变量赋值，这时变量是一个 LHS（左手边）引用，或者是为取得它的值，这时变量是一个 RHS（右手边）引用。")]),v._v(" "),a("p",[v._v("LHS 引用得自赋值操作。"),a("em",[v._v("作用域")]),v._v(" 相关的赋值可以通过 "),a("code",[v._v("=")]),v._v(" 操作符发生，也可以通过向函数参数传递（赋予）参数值发生。")]),v._v(" "),a("p",[v._v("JavaScript "),a("em",[v._v("引擎")]),v._v(" 在执行代码之前首先会编译它，因此，它将 "),a("code",[v._v("var a = 2;")]),v._v(" 这样的语句分割为两个分离的步骤：")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("首先，"),a("code",[v._v("var a")]),v._v(" 在当前 "),a("em",[v._v("作用域")]),v._v(" 中声明。这是在最开始，代码执行之前实施的。")])]),v._v(" "),a("li",[a("p",[v._v("稍后，"),a("code",[v._v("a = 2")]),v._v(" 查找这个变量（LHS 引用），并且如果找到就向它赋值。")])])]),v._v(" "),a("p",[v._v("LHS 和 RHS 引用查询都从当前执行中的 "),a("em",[v._v("作用域")]),v._v(" 开始，如果有需要（也就是，它们在这里没能找到它们要找的东西），它们会在嵌套的 "),a("em",[v._v("作用域")]),v._v(" 中一路向上，一次一个作用域（层）地查找这个标识符，直到它们到达全局作用域（顶层）并停止，既可能找到也可能没找到。")]),v._v(" "),a("p",[v._v("未被满足的 RHS 引用会导致 "),a("code",[v._v("ReferenceError")]),v._v(" 被抛出。未被满足的 LHS 引用会导致一个自动的，隐含地创建的同名全局变量（如果不是“Strict模式”[^note-strictmode]），或者一个 "),a("code",[v._v("ReferenceError")]),v._v("（如果是“Strict模式”[^note-strictmode]）。")]),v._v(" "),a("h3",{attrs:{id:"小测验答案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小测验答案","aria-hidden":"true"}},[v._v("#")]),v._v(" 小测验答案")]),v._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),a("ol",[a("li",[a("p",[v._v("找出所有的 LHS 查询（有3处！）。")]),v._v(" "),a("p",[a("strong",[a("code",[v._v("c = ..")]),v._v(", "),a("code",[v._v("a = 2")]),v._v("（隐含的参数赋值）和 "),a("code",[v._v("b = ..")])])])]),v._v(" "),a("li",[a("p",[v._v("找出所有的 RHS 查询（有4处！）。")]),v._v(" "),a("p",[a("strong",[a("code",[v._v("foo(2..")]),v._v(", "),a("code",[v._v("= a;")]),v._v(", "),a("code",[v._v("a + ..")]),v._v(" 和 "),a("code",[v._v(".. + b")])])])])]),v._v(" "),a("p",[v._v("[^note-strictmode]: MDN: "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode",target:"_blank",rel:"noopener noreferrer"}},[v._v("Strict Mode"),a("OutboundLink")],1)])])},[],!1,null,null,null);_.default=e.exports}}]);