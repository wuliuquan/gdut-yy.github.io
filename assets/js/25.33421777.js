(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{215:function(t,a,s){t.exports=s.p+"assets/img/fig2.977a364e.png"},646:function(t,a,s){"use strict";s.r(a);var n=s(0),v=Object(n.a)({},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第二章：词法作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二章：词法作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 第二章：词法作用域")]),t._v(" "),n("p",[t._v("在第一章中，我们将“作用域”定义为一组规则，它主宰着 "),n("em",[t._v("引擎")]),t._v(" 如何通过标识符名称在当前的 "),n("em",[t._v("作用域")]),t._v("，或者在包含它的任意 "),n("em",[t._v("嵌套作用域")]),t._v(" 中来查询一个变量，")]),t._v(" "),n("p",[t._v("作用域的工作方式有两种占统治地位的模型。其中的第一种是最最常见，在绝大多数的编程语言中被使用的。它称为 "),n("strong",[t._v("词法作用域")]),t._v("，我们将深入检视它。另一种仍然被一些语言（比如 Bash 脚本，Perl 中的一些模式，等等）使用的模型，称为 "),n("strong",[t._v("动态作用域")]),t._v("。")]),t._v(" "),n("p",[t._v("动态作用域在附录A中讲解。我在这里提到它仅仅是为词法作用域提供一个对比，而词法作用域是 JavaScript 所采用的作用域模型。")]),t._v(" "),n("h2",{attrs:{id:"词法分析时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#词法分析时","aria-hidden":"true"}},[t._v("#")]),t._v(" 词法分析时")]),t._v(" "),n("p",[t._v("正如我们在第一章中讨论的，标准语言编译器的第一个传统步骤称为词法分析（也就是分词）。如果你回忆一下，词法分析处理是检查一串源代码字符，并给 token 赋予语法含义作为某种有状态解析的输出。")]),t._v(" "),n("p",[t._v("正是这个概念给理解词法作用域是什么提供了基础，它也是这个名字的渊源。")]),t._v(" "),n("p",[t._v("要定义它有点儿兜圈子，词法作用域是在词法分析时被定义的作用域。换句话说，词法作用域是基于，你，在写程序时，变量和作用域的块儿在何处被编写决定的，因此它在词法分析器处理你的代码时（基本上）是固定不变的。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 我们将会稍稍看到有一些方法可以骗过词法作用域，从而在词法分析器处理过后改变它，但是这些方法都是使人皱眉头的。事实上公认的最佳实践是，将词法作用域看作是仅仅依靠词法的，因此自然而然地完全是编写时决定的。")]),t._v(" "),n("p",[t._v("让我们考虑这段代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 4 12")]),t._v("\n")])])]),n("p",[t._v("在这个代码实例中有三个固有的嵌套作用域。将这些作用域考虑为套在一起的气泡可能有助于思考。")]),t._v(" "),n("img",{attrs:{src:s(215),width:"500"}}),t._v(" "),n("p",[n("strong",[t._v("气泡1")]),t._v(" 包围着全局作用域，它里面只有一个标识符："),n("code",[t._v("foo")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("气泡2")]),t._v(" 包围着作用域 "),n("code",[t._v("foo")]),t._v("，它含有三个标识符："),n("code",[t._v("a")]),t._v("，"),n("code",[t._v("bar")]),t._v(" 和 "),n("code",[t._v("b")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("气泡3")]),t._v(" 包围着作用域 "),n("code",[t._v("bar")]),t._v("，它里面只包含一个标识符："),n("code",[t._v("c")]),t._v("。")]),t._v(" "),n("p",[t._v("作用域气泡是根据作用域的块儿被写在何处定义的，一个嵌套在另一个内部，等等。在下一章中，我们将讨论作用域的不同单位，但是就现在来说，让我们认为每一个函数创建了一个新的作用域气泡。")]),t._v(" "),n("p",[n("code",[t._v("bar")]),t._v(" 的气泡完全被包含在 "),n("code",[t._v("foo")]),t._v(" 的气泡中，因为（而且只因为）这就是我们选择定义函数 "),n("code",[t._v("bar")]),t._v(" 的位置。")]),t._v(" "),n("p",[t._v("注意这些嵌套的气泡是严格嵌套的。我们没有讨论气泡可以跨越边界的维恩图（Venn diagrams）。换句话说，没有那个函数的气泡可以同时（部分地）存在于另外两个外部的作用域气泡中，就像没有函数可以部分地存在于它的两个父函数中一样。")]),t._v(" "),n("h3",{attrs:{id:"查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查询","aria-hidden":"true"}},[t._v("#")]),t._v(" 查询")]),t._v(" "),n("p",[t._v("这些作用域气泡的结构和相对位置完全解释了 "),n("em",[t._v("引擎")]),t._v(" 在查找一个标识符时，它需要查看的所有地方。")]),t._v(" "),n("p",[t._v("在上面的代码段中，"),n("em",[t._v("引擎")]),t._v(" 执行语句 "),n("code",[t._v("console.log(..)")]),t._v(" 并开始查找三个被引用的变量 "),n("code",[t._v("a")]),t._v("，"),n("code",[t._v("b")]),t._v(" 和 "),n("code",[t._v("c")]),t._v("。它首先从最内部的作用域气泡开始，也就是 "),n("code",[t._v("bar(..)")]),t._v(" 函数的作用域。在这里它找不到 "),n("code",[t._v("a")]),t._v("，所以它向上走一层，到外面下一个最近的作用域气泡，"),n("code",[t._v("foo(..)")]),t._v(" 的作用域。它在这里找到了 "),n("code",[t._v("a")]),t._v("，于是它就使用这个 "),n("code",[t._v("a")]),t._v("。同样的事情也发生在 "),n("code",[t._v("b")]),t._v(" 身上。但是对于 "),n("code",[t._v("c")]),t._v("，它在 "),n("code",[t._v("bar(..)")]),t._v(" 内部就找到了。")]),t._v(" "),n("p",[t._v("如果在 "),n("code",[t._v("bar(..)")]),t._v(" 内部和 "),n("code",[t._v("foo(..)")]),t._v(" 内部都有一个 "),n("code",[t._v("c")]),t._v("，那么 "),n("code",[t._v("console.log(..)")]),t._v(" 语句将会找到并使用 "),n("code",[t._v("bar(..)")]),t._v(" 中的那一个，绝不会到达 "),n("code",[t._v("foo(..)")]),t._v(" 中的那一个。")]),t._v(" "),n("p",[n("strong",[t._v("一旦找到第一个匹配，作用域查询就停止了")]),t._v("。相同的标识符名称可以在嵌套作用域的多个层中被指定，这称为“遮蔽（shadowing）”（内部的标识符“遮蔽”了外部的标识符）。无论如何遮蔽，作用域查询总是从当前被执行的最内侧的作用域开始，向外/向上不断查找，直到第一个匹配才停止。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 全局变量也自动地是全局对象（在浏览器中是 "),n("code",[t._v("window")]),t._v("，等等）的属性，所以不直接通过全局变量的词法名称，而通过将它作为全局对象的一个属性引用来间接地引用，是可能的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\n")])])]),n("p",[t._v("这种技术给出了访问全局变量的方法，没有它全局变量将因为被遮蔽而不可访问。然而，被遮蔽的非全局变量是无法访问的。")]),t._v(" "),n("p",[t._v("不管函数是从 "),n("em",[t._v("哪里")]),t._v(" 被调用的，也不论它是 "),n("em",[t._v("如何")]),t._v(" 被调用的，它的词法作用域是由这个函数被声明的位置 "),n("strong",[t._v("唯一")]),t._v(" 定义的。")]),t._v(" "),n("p",[t._v("词法作用域查询 "),n("em",[t._v("仅仅")]),t._v(" 在处理头等标识符时实施，比如 "),n("code",[t._v("a")]),t._v("，"),n("code",[t._v("b")]),t._v("，和 "),n("code",[t._v("c")]),t._v("。如果你在一段代码中拥有一个 "),n("code",[t._v("foo.bar.baz")]),t._v(" 的引用，词法作用域查询将在查找 "),n("code",[t._v("foo")]),t._v(" 标识符时实施，但一旦定位这个变量，对象属性访问规则将会分别接管 "),n("code",[t._v("bar")]),t._v(" 和 "),n("code",[t._v("baz")]),t._v(" 属性的解析。")]),t._v(" "),n("h2",{attrs:{id:"欺骗词法作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#欺骗词法作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 欺骗词法作用域")]),t._v(" "),n("p",[t._v("如果词法作用域是由函数被声明的位置唯一定义的，而且这个位置完全是一个编写时的决定，那么怎么可能有办法在运行时“修改”（也就是，作弊欺骗）词法作用域呢？")]),t._v(" "),n("p",[t._v("JavaScript 有两种这样的机制。在广大的社区中它们都等同地被认为是让人皱眉头的，在你代码中使用它们是一种差劲儿的做法。但是关于它们的常见的争论经常错过了最重要的一点："),n("strong",[t._v("欺骗词法作用域会导致更低下的性能。")])]),t._v(" "),n("p",[t._v("在我讲解性能的问题以前，先让我们看看这两种机制是如何工作的。")]),t._v(" "),n("h3",{attrs:{id:"eval"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eval","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("eval")])]),t._v(" "),n("p",[t._v("JavaScript 中的 "),n("code",[t._v("eval(..)")]),t._v(" 函数接收一个字符串作为参数值，并将这个字符串的内容看作是好像它已经被实际编写在程序的那个位置上。换句话说，你可以用编程的方式在你编写好的代码内部生成代码，而且你可以运行这个生成的代码，就好像它在编写时就已经在那里了一样。")]),t._v(" "),n("p",[t._v("如果以这种观点来评价 "),n("code",[t._v("eval(..)")]),t._v("，那么 "),n("code",[t._v("eval(..)")]),t._v(" 是如何允许你修改词法作用域环境应当是很清楚的：欺骗并假装这个编写时（也就是，词法）代码一直就在那里。")]),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("eval(..)")]),t._v(" 被执行的后续代码行中，"),n("em",[t._v("引擎")]),t._v(" 将不会“知道”或“关心”前面的代码是被动态翻译的，而且因此修改了词法作用域环境。"),n("em",[t._v("引擎")]),t._v(" 将会像它一直做的那样，简单地进行词法作用域查询。")]),t._v(" "),n("p",[t._v("考虑如下代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作弊！")]),t._v("\n\tconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var b = 3;"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 3")]),t._v("\n")])])]),n("p",[t._v("在 "),n("code",[t._v("eval(..)")]),t._v(" 调用的位置上，字符串 "),n("code",[t._v('"var b = 3"')]),t._v(" 被看作是一直就存在在那里的代码。因为这个代码恰巧声明了一个新的变量 "),n("code",[t._v("b")]),t._v("，它就修改了现存的 "),n("code",[t._v("foo(..)")]),t._v(" 的词法作用域。事实上，就像上面提到的那样，这个代码实际上在 "),n("code",[t._v("foo(..)")]),t._v(" 内部创建了变量 "),n("code",[t._v("b")]),t._v("，它遮蔽了声明在外部（全局）作用域中的 "),n("code",[t._v("b")]),t._v("。")]),t._v(" "),n("p",[t._v("当 "),n("code",[t._v("console.log(..)")]),t._v(" 调用发生时，它会在 "),n("code",[t._v("foo(..)")]),t._v(" 的作用域中找到 "),n("code",[t._v("a")]),t._v(" 和 "),n("code",[t._v("b")]),t._v("，而且绝不会找到外部的 "),n("code",[t._v("b")]),t._v('。这样，我们就打印出 "1 3" 而不是一般情况下的 "1 2"。')]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 在这个例子中，为了简单起见，我们传入的“代码”字符串是固定的文字。但是它可以通过根据你的程序逻辑将字符拼接在一起，很容易地以编程方式创建。"),n("code",[t._v("eval(..)")]),t._v(" 通常被用于执行动态创建的代码，因为动态地对一段实质上源自字符串字面值的静态代码进行求值，并不会比直接编写这样的代码带来更多真正的好处。")]),t._v(" "),n("p",[t._v("默认情况下，如果 "),n("code",[t._v("eval(..)")]),t._v(" 执行的代码字符串包含一个或多个声明（变量或函数）的话，这个动作就会修改这个 "),n("code",[t._v("eval(..)")]),t._v(" 所在的词法作用域。技术上讲，"),n("code",[t._v("eval(..)")]),t._v(" 可以通过种种技巧（超出了我们这里的讨论范围）被“间接”调用，而使它在全局作用域的上下文中执行，以此修改全局作用域。但不论那种情况，"),n("code",[t._v("eval(..)")]),t._v(" 都可以在运行时修改一个编写时的词法作用域。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 当 "),n("code",[t._v("eval(..)")]),t._v(" 被用于一个操作它自己的词法作用域的 strict 模式程序时，在 "),n("code",[t._v("eval(..)")]),t._v(" 内部做出的声明不会实际上修改包围它的作用域。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"use strict"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError: a is not defined")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var a = 2"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("在 JavaScript 中还有其他的工具拥有与 "),n("code",[t._v("eval(..)")]),t._v(" 非常类似的效果。"),n("code",[t._v("setTimeout(..)")]),t._v(" 和 "),n("code",[t._v("setInterval(..)")]),t._v(" "),n("em",[t._v("可以")]),t._v(" 为它们各自的第一个参数值接收一个字符串，其内容将会被 "),n("code",[t._v("eval")]),t._v(" 为一个动态生成的函数的代码。这种老旧的，遗产行为早就被废弃了。别这么做！")]),t._v(" "),n("p",[n("code",[t._v("new Function(..)")]),t._v(" 函数构造器类似地为它的 "),n("strong",[t._v("最后")]),t._v(" 一个参数值接收一个代码字符串，来把它转换为一个动态生成的函数（前面的参数值，如果有的话，将作为新函数的形式参数）。这种函数构造器语法要比 "),n("code",[t._v("eval(..)")]),t._v(" 稍稍安全一些，但在你的代码中它仍然应当被避免。")]),t._v(" "),n("p",[t._v("在你的代码中动态生成代码的用例少的不可思议，因为在性能上的倒退使得这种能力几乎总是得不偿失。")]),t._v(" "),n("h3",{attrs:{id:"with"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#with","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("with")])]),t._v(" "),n("p",[t._v("JavaScript 的另一个使人皱眉头（而且现在被废弃了！），而且可以欺骗词法作用域的特性是 "),n("code",[t._v("with")]),t._v(" 关键字。有许多种合法的方式可以讲解 "),n("code",[t._v("with")]),t._v("，但是我在此选择从它如何与词法作用域互动并影响词法作用域的角度来讲解它。")]),t._v(" "),n("p",[t._v("讲解 "),n("code",[t._v("with")]),t._v(" 的常见方式是作为一种缩写，来引用一个对象的多个属性，而 "),n("em",[t._v("不必")]),t._v(" 每次都重复对象引用本身。")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  重复“obj”显得更“繁冗”")]),t._v("\nobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// “更简单”的缩写")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tb "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("然而，这里发生的事情要比只是一个对象属性访问的便捷缩写要多得多。考虑如下代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" o1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" o1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" o2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" o2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 -- 哦，全局作用域被泄漏了！")]),t._v("\n")])])]),n("p",[t._v("在这个代码示例中，创建了两个对象 "),n("code",[t._v("o1")]),t._v(" 和 "),n("code",[t._v("o2")]),t._v("。一个有 "),n("code",[t._v("a")]),t._v(" 属性，而另一个没有。"),n("code",[t._v("foo(..)")]),t._v(" 函数接收一个对象引用 "),n("code",[t._v("obj")]),t._v(" 作为参数值，并在这个引用上调用 "),n("code",[t._v("with (obj) {..}")]),t._v("。在 "),n("code",[t._v("with")]),t._v(" 块儿内部，我们制造了一个变量 "),n("code",[t._v("a")]),t._v(" 的看似是普通词法引用的东西，实际上是一个 LHS 引用（见第一章），并将值 "),n("code",[t._v("2")]),t._v(" 赋予它。")]),t._v(" "),n("p",[t._v("当我们传入 "),n("code",[t._v("o1")]),t._v(" 时，赋值 "),n("code",[t._v("a = 2")]),t._v(" 找到属性 "),n("code",[t._v("o1.a")]),t._v(" 并赋予它值 "),n("code",[t._v("2")]),t._v("，正如在后续的 "),n("code",[t._v("console.log(o1.a)")]),t._v(" 语句中反映出的那样。然而，当我们传入 "),n("code",[t._v("o2")]),t._v("，因为它没有 "),n("code",[t._v("a")]),t._v(" 属性，没有这样的属性被创建，所以 "),n("code",[t._v("o2.a")]),t._v(" 还是 "),n("code",[t._v("undefined")]),t._v("。")]),t._v(" "),n("p",[t._v("但是之后我们注意到一个特别的副作用，赋值 "),n("code",[t._v("a = 2")]),t._v(" 创建了一个全局变量 "),n("code",[t._v("a")]),t._v("。这怎么可能？")]),t._v(" "),n("p",[n("code",[t._v("with")]),t._v(" 语句接收一个对象，这个对象有0个或多个属性，并 "),n("strong",[t._v("将这个对象视为好像它是一个完全隔离的词法作用域")]),t._v("，因此这个对象的属性被视为在这个“作用域”中词法定义的标识符。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 尽管一个 "),n("code",[t._v("with")]),t._v(" 块儿将一个对象视为一个词法作用域，但是在 "),n("code",[t._v("with")]),t._v(" 块儿内部的一个普通 "),n("code",[t._v("var")]),t._v(" 声明将不会归于这个 "),n("code",[t._v("with")]),t._v(" 块儿的作用域，而是归于包含它的函数作用域。")]),t._v(" "),n("p",[t._v("如果 "),n("code",[t._v("eval(..)")]),t._v(" 函数接收一个含有一个或多个声明的代码字符串，它就会修改现存的词法作用域，而 "),n("code",[t._v("with")]),t._v(" 语句实际上是从你传递给它的对象中凭空制造了一个 "),n("strong",[t._v("全新的词法作用域")]),t._v("。")]),t._v(" "),n("p",[t._v("以这种方式理解的话，当我们传入 "),n("code",[t._v("o1")]),t._v(" 时 "),n("code",[t._v("with")]),t._v(" 语句声明的“作用域”就是 "),n("code",[t._v("o1")]),t._v("，而且这个“作用域”拥有一个对应于 "),n("code",[t._v("o1.a")]),t._v(" 属性的“标识符”。但当我们使用 "),n("code",[t._v("o2")]),t._v(" 作为“作用域”时，它里面没有这样的 "),n("code",[t._v("a")]),t._v(" “标识符”，于是 LHS 标识符查询（见第一章）的普通规则发生了。")]),t._v(" "),n("p",[t._v("“作用域” "),n("code",[t._v("o2")]),t._v(" 中没有，"),n("code",[t._v("foo(..)")]),t._v(" 的作用域中也没有，甚至连全局作用域中都没有找到标识符 "),n("code",[t._v("a")]),t._v("，所以当 "),n("code",[t._v("a = 2")]),t._v(" 被执行时，其结果就是自动全局变量被创建（因为我们没有在 strict 模式下）。")]),t._v(" "),n("p",[n("code",[t._v("with")]),t._v(" 在运行时将一个对象和它的属性转换为一个带有“标识符”的“作用域”，这个奇怪想法有些烧脑。但是对于我们看到的结果来说，这是我能给出的最清晰的解释。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 除了使用它们是个坏主意以外，"),n("code",[t._v("eval(..)")]),t._v(" 和 "),n("code",[t._v("with")]),t._v(" 都受Strict模式的影响（制约）。"),n("code",[t._v("with")]),t._v(" 干脆就不允许使用，而虽然 "),n("code",[t._v("eval(..)")]),t._v(" 还保有其核心功能，但各种间接形式的或不安全的 "),n("code",[t._v("eval(..)")]),t._v(" 是不允许的。")]),t._v(" "),n("h3",{attrs:{id:"性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能","aria-hidden":"true"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),n("p",[t._v("通过在运行时修改，或创建新的词法作用域，"),n("code",[t._v("eval(..)")]),t._v(" 和 "),n("code",[t._v("with")]),t._v(" 都可以欺骗编写时定义的词法作用域。")]),t._v(" "),n("p",[t._v("你可能会问，那又有什么大不了的？如果它们提供了更精巧的功能和编码灵活性，那它们不是 "),n("em",[t._v("好的")]),t._v(" 特性吗？"),n("strong",[t._v("不。")])]),t._v(" "),n("p",[t._v("JavaScript "),n("em",[t._v("引擎")]),t._v(" 在编译阶段期行许多性能优化工作。其中的一些优化原理都归结为实质上在进行词法分析时可以静态地分析代码，并提前决定所有的变量和函数声明都在什么位置，这样在执行期间就可以少花些力气来解析标识符。")]),t._v(" "),n("p",[t._v("但如果 "),n("em",[t._v("引擎")]),t._v(" 在代码中发现一个 "),n("code",[t._v("eval(..)")]),t._v(" 或 "),n("code",[t._v("with")]),t._v("，它实质上就不得不 "),n("em",[t._v("假定")]),t._v(" 自己知道的所有的标识符的位置可能是无效的，因为它不可能在词法分析时就知道你将会向"),n("code",[t._v("eval(..)")]),t._v("传递什么样的代码来修改词法作用域，或者你可能会向"),n("code",[t._v("with")]),t._v("传递的对象有什么样的内容来创建一个新的将被查询的词法作用域。")]),t._v(" "),n("p",[t._v("换句话说，悲观地看，如果 "),n("code",[t._v("eval(..)")]),t._v(" 或 "),n("code",[t._v("with")]),t._v(" 出现，那么它 "),n("em",[t._v("将")]),t._v(" 做的几乎所有的优化都会变得没有意义，所以它就会简单地根本不做任何优化。")]),t._v(" "),n("p",[t._v("你的代码几乎肯定会趋于运行的更慢，只因为你在代码的任何地方引入了一个了 "),n("code",[t._v("eval(..)")]),t._v(" 或 "),n("code",[t._v("with")]),t._v("。无论 "),n("em",[t._v("引擎")]),t._v(" 将在努力限制这些悲观臆测的副作用上表现得多么聪明，"),n("strong",[t._v("都没有任何办法可以绕过这个事实：没有优化，代码就运行的更慢。")])]),t._v(" "),n("h2",{attrs:{id:"复习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复习","aria-hidden":"true"}},[t._v("#")]),t._v(" 复习")]),t._v(" "),n("p",[t._v("词法作用域意味着作用域是由编写时函数被声明的位置的决策定义的。编译器的词法分析阶段实质上可以知道所有的标识符是在哪里和如何声明的，并如此在执行期间预测它们将如何被查询。")]),t._v(" "),n("p",[t._v("在 JavaScript 中有两种机制可以“欺骗”词法作用域："),n("code",[t._v("eval(..)")]),t._v(" 和 "),n("code",[t._v("with")]),t._v("。前者可以通过对一个拥有一个或多个声明的“代码”字符串进行求值，来（在运行时）修改现存的词法作用域。后者实质上是通过将一个对象引用看作一个“作用域”，并将这个对象的属性看作作用域中的标识符，（同样，也是在运行时）创建一个全新的词法作用域。")]),t._v(" "),n("p",[t._v("这些机制的缺点是，它压制了 "),n("em",[t._v("引擎")]),t._v(" 在作用域查询上进行编译期优化的能力，因为 "),n("em",[t._v("引擎")]),t._v(" 不得不悲观地假定这样的优化是无效的。这两种特性的结果就是代码 "),n("em",[t._v("将")]),t._v(" 会运行的更慢。"),n("strong",[t._v("不要使用它们。")])])])},[],!1,null,null,null);a.default=v.exports}}]);